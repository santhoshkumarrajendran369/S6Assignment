name: Model Architecture Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
    
    - name: Run Parameter Count Test
      run: |
        echo "::group::Total Parameter Count Test"
        python -c "
import torch
from model import Net
model = Net()
total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
print(f'\nTotal Parameters: {total_params:,}')
assert total_params < 20000, f'Model has {total_params:,} parameters, exceeding 20k limit'
print('\n✅ Parameter Count Test Passed: Model has less than 20k parameters')
        "
        echo "::endgroup::"
      
    - name: Test Batch Normalization
      run: |
        echo "::group::Batch Normalization Test"
        python -c "
import torch
import torch.nn as nn
from model import Net
model = Net()
bn_layers = sum(1 for m in model.modules() if isinstance(m, nn.BatchNorm2d))
print(f'\nBatch Normalization Layers Found: {bn_layers}')
assert bn_layers > 0, 'No Batch Normalization layers found'
print('\n✅ Batch Normalization Test Passed: Found {bn_layers} BatchNorm layers')
        "
        echo "::endgroup::"
        
    - name: Test Dropout Usage
      run: |
        echo "::group::Dropout Test"
        python -c "
import torch
import torch.nn as nn
from model import Net
model = Net()
dropout_layers = [(name, m.p) for name, m in model.named_modules() if isinstance(m, nn.Dropout)]
print(f'\nDropout Layers Found: {len(dropout_layers)}')
for name, p in dropout_layers:
    print(f'Layer: {name}, Dropout Rate: {p}')
assert len(dropout_layers) > 0, 'No Dropout layers found'
print('\n✅ Dropout Test Passed: Found {len(dropout_layers)} Dropout layers')
        "
        echo "::endgroup::"
        
    - name: Test GAP vs FC Layer
      run: |
        echo "::group::GAP vs FC Layer Test"
        python -c "
import torch
import torch.nn as nn
from model import Net
model = Net()
fc_layers = sum(1 for m in model.modules() if isinstance(m, nn.Linear))
print(f'\nFully Connected Layers Found: {fc_layers}')
assert fc_layers == 0, 'Found Fully Connected layers, should use GAP instead'
print('\n✅ Architecture Test Passed: No FC layers found, using GAP')
        "
        echo "::endgroup::"
    
    - name: Generate Test Summary
      if: always()
      run: |
        echo "## Model Architecture Test Results" >> $GITHUB_STEP_SUMMARY
        echo "### Test Requirements:" >> $GITHUB_STEP_SUMMARY
        echo "✓ Total Parameter Count < 20k" >> $GITHUB_STEP_SUMMARY
        echo "✓ Use of Batch Normalization" >> $GITHUB_STEP_SUMMARY
        echo "✓ Use of Dropout" >> $GITHUB_STEP_SUMMARY
        echo "✓ Use of Global Average Pooling (No FC layers)" >> $GITHUB_STEP_SUMMARY
        
        if [ ${{ job.status }} == 'success' ]; then
          echo "### Status: ✅ All Tests Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Status: ❌ Tests Failed" >> $GITHUB_STEP_SUMMARY
        fi
